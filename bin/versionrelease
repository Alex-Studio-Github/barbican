#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Product a release version of this build
"""

import os
import sys
import subprocess
from time import strftime, gmtime


# Determine version of this application.
PKG = "barbican"
VERSIONFILE = os.path.join(PKG, "version.py")
CHANGEFILE = os.path.join("debian", "changelog")
SIMPLEFILE = 'versiononly.txt'
current_dir = os.getcwd()
if current_dir.endswith('bin'):
    VERSIONFILE = os.path.join("..", PKG, "version.py")
    CHANGEFILE = os.path.joih("..", "debian", "changelog")


def get_version():
    """Retrieves the current version string from the version.py file"""
    version = "unknown"
    try:
        version_file = open(VERSIONFILE, "r")
        for line in version_file:
            if line.startswith('__version__'):
                version = line.split("'")[1]
                break
    except EnvironmentError:
        pass  # Okay, there is no version file.
    return version


def get_commit_id():
    """Retrieves the commit ID from git."""
    p_short = subprocess.Popen(['git describe --always'],
                               stdout=subprocess.PIPE, shell=True)
    output_short, err = p_short.communicate()
    if err:
        print 'Error seen: {0}'.format(err)
        raise ValueError("Problem invoking 'git describe' command.")

    p_long = subprocess.Popen(['git rev-parse HEAD'],
                              stdout=subprocess.PIPE, shell=True)
    output_long, err = p_long.communicate()
    if err:
        print 'Error seen: {0}'.format(err)
        raise ValueError("Problem invoking 'git rev-parse HEAD' command.")

    return output_short.rstrip(), output_long.rstrip()


def format_release_version(version, build_id_to_inject):
    """
    Injects the specified build id into the build section of the version string.
    The build section is the last group after the last '.'.
    """
    subs = version.split(".")
    subs[-1] = build_id_to_inject
    return '.'.join(subs)


def generate_build_id_as_datetime():
    return strftime("%Y%m%d%H%M%S", gmtime())


def update_versionfile(version, commit_id):
    temp_name = VERSIONFILE + "~"
    file_new = open(temp_name, 'w')
    try:
        with open(VERSIONFILE, 'r') as file_old:
            for line in file_old:
                if line.startswith('__version__'):
                    subs = line.split("'")
                    subs[1] = version
                    file_new.write("'".join(subs))
                elif line.startswith('__version_commit__'):
                    subs = line.split("'")
                    subs[1] = commit_id
                    file_new.write("'".join(subs))
                else:
                    file_new.write(line)
    finally:
        file_new.close()
        os.rename(temp_name, VERSIONFILE)


def update_changefile(version):
    temp_name = CHANGEFILE + "~"
    file_new = open(temp_name, 'w')
    try:
        with open(CHANGEFILE, 'r') as file_old:
            for line in file_old:
                line_new = ''
                if line.startswith(PKG):
                    left = line[:line.index('(') + 1]
                    right = line[line.index('-1)'):]
                    line_new = ''.join([left, version, right])
                elif '--' in line:
                    left = line[:line.index('>') + 1]
                    now_text = strftime("%a, %d %b %Y %H:%M:%S %z")
                    line_new = ''.join([left, '  ', now_text])
                else:
                    line_new = line
                file_new.write(line_new)
    finally:
        file_new.close()
        os.rename(temp_name, CHANGEFILE)

if __name__ == '__main__':
    version = get_version()
    if not version:
        raise ValueError('Could not locate version or barbican/version.py '
                         'file.')

    # Create a release version and update the version.py file accordingly.
    commit_short, commit_long = get_commit_id()
    release = format_release_version(version,
                                     generate_build_id_as_datetime())
    print 'release: ', release
    print 'commit (long): ', commit_long
    print 'commit (short): ', commit_short
    print 'version template: ', version
    update_versionfile(release, commit_long)
    update_changefile(release)

    # Output the version number to a flat file.
    with open(SIMPLEFILE, 'w') as outver:
        outver.write(release)
